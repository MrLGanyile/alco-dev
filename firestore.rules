rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // get - used if a client with want to read this document.
      // list - used if there is going to be a query returning this document.
      // To make this rule cascade I'll have to use restOfPath=** wildcard otherwise it won't.
      allow read, write: if false;
    }

    function isSuperiorAdmin(){
      return request.auth != null &&
      exists(/databases/$(database)/documents/admins/
      $(request.auth.uid)) && get(/databases/$(database)/documents/admins/
      $(request.auth.uid)).data.isSuperiorAdmin;
    }

    // Branch : supported_locations_resources_crud -> supported_locaitons_resources_crud_firestore_security_rules
    match /supported_countries/{countryId}{
      allow write: if false;
      allow read;
    }

    // Branch : supported_locations_resources_crud -> supported_locaitons_resources_crud_firestore_security_rules
    match /supported_provinces_or_states/{provinceOrStateId}{
      allow write: if false;
      allow read;
    }

    // Branch : supported_locations_resources_crud -> supported_locaitons_resources_crud_firestore_security_rules
    match /supported_cities/{cityId}{
      allow write: if false;
      allow read;
    }

    // Branch : supported_locations_resources_crud -> supported_locaitons_resources_crud_firestore_security_rules
    match /supported_towns_or_institutions/{townsOrInstitutionsId}{
      allow write: if false;
      allow read;
    }

    // Branch : supported_locations_resources_crud -> supported_locaitons_resources_crud_firestore_security_rules
    match /supported_areas/{areaId}{
      allow write: if false;
      allow read;
    }

    // ==============================Done With Unit Testing [Start]==============================

    // Branch : group_resources_crud_storage_security_rules
    // Note: Has Model Named {Alcoholic}
    match /alcoholics/{alcoholicUID}{
      allow create: if request.auth!=null &&

      // We need to compare a property(phoneNumber) of admin docs instead of a uid.
      exists(/databases/$(database)/documents/admins/
      $(request.auth.uid))==false &&

      // Phone number is provided and matches the document id provided.
      request.resource.data.phoneNumber != null &&
      request.resource.data.phoneNumber != '' &&

      // We need to compare a property(phoneNumber) of alcoholic docs instead of a uid.
      exists(/databases/$(database)/documents/alcoholics/
      $(request.auth.uid))==false &&

      request.resource.data.profileImageURL != null &&
      request.resource.data.profileImageURL != '';

      allow read;

      // "update" is made this way because it conflicts with "create".
      allow update, delete: if false;
    }

    // Branch : group_resources_crud_storage_security_rules
    // Note: Has Model Named {Group}
    match /groups/{groupId}{

      allow create; // : if request.auth != null &&

      // Make sure a user is an alcoholic.
      // (exists(/databases/$(database)/documents/alcoholics/
      // $(request.auth.uid)) ||
      // exists(/databases/$(database)/documents/admins/
      // $(request.auth.uid))
      // ) && 

      // Make sure users do not create more than one group.
      //exists(/databases/$(database)/documents/groups/
      //$(request.auth.uid)) == false && 

      // request.resource.data.groupName != null &&
      // request.resource.data.groupName.size() >= 3 &&

      // request.resource.data.groupImageURL!= null &&
      // request.resource.data.groupImageURL != '' &&

      // request.resource.data.groupArea != null &&
      // request.resource.data.groupSpecificArea != '' &&
      // request.resource.data.groupTownOrInstitution != null &&
      
      // request.resource.data.groupCreatorPhoneNumber != null &&
      // request.resource.data.groupCreatorPhoneNumber == request.auth.uid &&

      // request.resource.data.groupCreatorUsername != null &&
      // request.resource.data.groupCreatorUsername != '' &&

      // request.resource.data.groupCreatorImageURL != null &&
      // request.resource.data.groupCreatorImageURL != '' &&
      
      // request.resource.data.groupMembers != null &&
      // request.resource.data.groupMembers.size() == 5 &&

      // request.resource.data.isActive==false &&
      
      // request.resource.data.maxNoOfMembers == 5;

      // Anybody can view groups.
      allow read;

      // Let users join or leave groups.
      allow update:if true; //request.auth != null && 

      // isSuperiorAdmin() == false &&
      
      // request.resource.data.groupName == 
      // resource.data.groupName &&

      // request.resource.data.groupImageURL == 
      // resource.data.groupImageURL &&

      // request.resource.data.groupSectionName == 
      // resource.data.groupSectionName &&

      // request.resource.data.groupSpecificArea == 
      // resource.data.groupSpecificArea &&
      
      // request.resource.data.groupCreatorPhoneNumber ==
      // resource.data.groupCreatorPhoneNumber &&

      // request.resource.data.groupCreatorUsername ==
      // resource.data.groupCreatorUsername &&

      // request.resource.data.groupCreatorImageURL ==
      // resource.data.groupCreatorImageURL &&
      
      // A user can only join or leave a group.
      // (
        
      // (
        // request.resource.data.groupMembers.size() < resource.data.maxNoOfMembers &&
        // request.resource.data.groupMembers.size()  == resource.data.groupMembers.size() + 1
        
      // ) ||
      // (
        // request.resource.data.groupMembers.size() > 1 &&
        // request.resource.data.groupMembers.size() ==
        // resource.data.groupMembers.size() - 1
        
      // )
      // );

      allow delete: if false;
    }

    // Note: Has Model Named {Admin}
    match /admins/{adminPhoneNumber}{
      // allow write, read;
      allow create: if isSuperiorAdmin() && 
      request.resource.data.isSuperiorAdmin == false;

      allow read;//: if isSuperiorAdmin() || 
      //(request.auth != null && request.auth.uid == resource.data.phoneNumber);

      allow delete: if isSuperiorAdmin() && 
      resource.data.isSuperiorAdmin == false;

      allow update: if false; 
    }

    // ==============================Done With Unit Testing [End]==============================

    // Branch : store_resources_crud ->  store_resources_crud_storage_security_rules
    // Note: Has Model Named {Store}
    match /stores/{storeOwnerPhoneNumber}{

      allow write: if false;
      // Any logged in store owner can read store's info his/her store info.
      allow read: if true;

      // Branch : store_resources_crud ->  store_resources_crud_storage_security_rules
      // Note: Has Model Named {StoreDraw}
      match /store_draws/{storeDrawId}{

        // Only a store owner can create a store draw.
        allow create; //: if isSuperiorAdmin();// &&
        
        // Make Sure It Sunday. 
        // Make Sure There Is No Other Previous Unplayed Store Draw.
        // [removed for front end testing purpose, backend unit tests already passed.] request.resource.data.drawDateAndTime.weekday==7 && 
        
        // [removed for front end testing purpose, backend unit tests already passed.] 
        //request.resource.data.drawDateAndTime.hour==8 &&

        // Make Sure It 8am, 9am or 10am.
        //[removed for front end testing purpose, backend unit tests already passed.] 
        //(request.resource.data.drawDateAndTime.minute==8 
        //|| request.resource.data.drawDateAndTime.minute==9 || 
        //request.resource.data.drawDateAndTime.minute==10)

        // Anybody can view store draws.
        allow read;

        // Only accept store draw update or delete from the store owner while the straw is still open.
        allow update, delete: if isSuperiorAdmin();

        // Branch : store_resources_crud ->  store_resources_crud_storage_security_rules
        // Done With Unit Testing.
        match /draw_grand_prices/{drawGrandPrices}{
          
          // Only a store owner can create a store draw grand price.
          allow create;//: if isSuperiorAdmin();// &&
          
          //request.resource.data.grandPriceId != null &&
          //request.resource.data.grandPriceId == drawGrandPrices &&

          //request.resource.data.storeDrawFK != null &&
          //request.resource.data.storeDrawFK == storeDrawId &&

          //request.resource.data.imageURL != null &&
          //request.resource.data.imageURL != "" &&

          //request.resource.data.description != null &&
          //request.resource.data.description != "" &&

          //request.resource.data.grandPriceIndex != null &&
          //request.resource.data.grandPriceIndex>=0;

          // Anybody can view store draws.
          allow read;

          // Only accept deletion of a competitor from the store owner while the draw is still open.
          allow update, delete: if 
          isSuperiorAdmin() &&
          resource.data.storeDrawFK==storeDrawId &&
          get(/databases/$(database)/documents/stores/$(storeOwnerPhoneNumber)/store_draws/$(storeDrawId)).isOpen;
        }
          
      }

    }

    // Branch : won_price_summary_resources_crud -> won_price_summary_crud_firestore_security_rules
    // Note: Has Model Named {WonPriceSummary}
    match /won_prices_summaries/{wonPriceSummaryId}{
      
      // create - Invoked Whenever Somebody Wins A Competition.
      allow write: if false;

      // Everybody can see a won price.
      allow read;

      // Note: Has Model Named {WonPriceComment}
      match /comments/{commentId}{
        allow write;
        allow read;
      }
    }

    // Branch : store_resources_crud ->  store_resources_crud_storage_security_rules
    // Note: Has Model Named {StoreNameInfo}
    match /stores_names_info/{storeNameInfoId}{
      allow read, update: if true;
      allow create, delete: if false; // Called By A Cloud Function Only.
    
    }

    // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
    // All competitions should take the same amount of time to finish.
    // Note: Has Model Named {Competition}
    match /competitions/{competitionId}{
      
      // get - Invoked whenever one needs to view the competition.
      allow get: if true; 
      allow list: if false;
      allow update;
      
      // create - Automatically invoked when a competition is created(Screen 10.2.1).
      allow create: if request.auth.uid != null &&
      get(/databases/$(database)/documents/users/
      $(request.auth.uid)).data.isOwner == true;
      
      // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
      // Note: Has Model Named {GrandPricesGrid}
      match /grand_prices_grids/{grandPriceGridId}{

        allow write: if false;
        allow get: if true; 
        allow list: if false;

        // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
        // Note: Has Model Named {GrandPriceToken}
        match /grand_prices_tokens/{grandPriceTokenId}{
          allow write: if false;
          allow read: if true;
        }
      
      }

      // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
      // Note: Has Model Named {GroupCompetitorsGrid}
      match /group_competitors_grids/{competitorGridId}{
        
        allow write: if false;
        allow get: if true; 
        allow list: if false;

        // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
        // Note: Has Model Named {GroupCompetitorToken}
        match /group_competitors_tokens/{competitorTokenId}{
          allow write: if false;
          allow get: if false;
          allow list: if true;
        }
      }
    }

    // Branch : competition_resources_crud ->  competition_resources_crud_firestore_security_rules
    match /count_down_clocks/{competitionCountDownId}{
      allow read;
      allow write: if false;
    }

    match /past_posts/{postId}{
      allow read;
      allow write;

      match /comments/{commentId}{
        allow read;
        allow write;
      }
    }

    match /notifications/{notificationId}{
      allow read;
      allow write;
    }

    match /recruitment_history/{recruitmentHistoryId}{
      allow read;
      allow write;
    }
  }
}  